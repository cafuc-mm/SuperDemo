<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        classpath:/org/springframework/beans/factory/xml/spring-beans-4.3.xsd
        http://www.springframework.org/schema/tx
        classpath:/org/springframework/transaction/config/spring-tx-4.3.xsd
        http://www.springframework.org/schema/aop
        classpath:/org/springframework/aop/config/spring-aop-4.3.xsd
        http://www.springframework.org/schema/context
        classpath:/org/springframework/context/config/spring-context-4.3.xsd">
            
    <!--1 自动扫描 将标注Spring注解的类自动转化Bean--> 
    <context:component-scan base-package="com.sd" />
    
    <!--2 加载数据资源属性文件 --> 
    <bean id="propertyConfigurer"  
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:jdbc.properties" />  
    </bean>  
  	
  	<!-- 3 配置数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  
        destroy-method="close">  
        <property name="driverClassName" value="${driver}" />  
        <property name="url" value="${url}" />  
        <property name="username" value="${username}" />  
        <property name="password" value="${password}" />  
        <!-- 初始化连接大小 -->  
        <property name="initialSize" value="${initialSize}"></property>  
        <!-- 连接池最大数量 -->  
        <property name="maxActive" value="${maxActive}"></property>  
        <!-- 连接池最大空闲 -->  
        <property name="maxIdle" value="${maxIdle}"></property>  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="${minIdle}"></property>  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="${maxWait}"></property>  
    </bean>  
 
  <!-- 4   配置sessionfactory
  spring和MyBatis整合，不需要mybatis的配置映射文件 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
    <property name="dataSource" ref="dataSource" />  
    <!-- 自动扫描mapping.xml文件 -->  
    <property name="mapperLocations" value="classpath:mapper/*Mapper.xml"></property>
  </bean>
  
	<!-- 5  装配mapper(dao)接口 -->  
	<!-- mapper接口所在包名，Spring会自动查找其下的类   
	mapper批量扫描，从mapper包中扫描出mapper接口，自动创建代理对象并且在spring容器中注册
	遵循规范：将mapper.java和mapper.xml映射文件名称保持一致，且在一个目录 中
	自动扫描出来的mapper的bean的id为mapper类名（首字母小写）
	指定扫描的包名,如果扫描多个包，每个包中间使用半角逗号分隔
	-->
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
	  <property name="basePackage" value="com.sd.dao" />
	  <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
	</bean>
      
    <!-- 6、声明式事务管理 -->   
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  

    <!-- proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。
    	如果proxy-target-class 属性值被设置为true，
    	那么基于类的代理将起作用（这时需要cglib库） -->   
	<tx:annotation-driven transaction-manager="transactionManager"  proxy-target-class="false"/>    

</beans>  